// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fxxk.proto

package fxxk

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command_Type int32

const (
	Command_PING           Command_Type = 0
	Command_NEW_CONNECTION Command_Type = 1
	Command_CLOSE          Command_Type = 99
)

var Command_Type_name = map[int32]string{
	0:  "PING",
	1:  "NEW_CONNECTION",
	99: "CLOSE",
}

var Command_Type_value = map[string]int32{
	"PING":           0,
	"NEW_CONNECTION": 1,
	"CLOSE":          99,
}

func (x Command_Type) String() string {
	return proto.EnumName(Command_Type_name, int32(x))
}

func (Command_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_900b8d357a079f0a, []int{0, 0}
}

type Command struct {
	Type                 Command_Type `protobuf:"varint,1,opt,name=type,proto3,enum=heimonsy.fxxk.Command_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_900b8d357a079f0a, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetType() Command_Type {
	if m != nil {
		return m.Type
	}
	return Command_PING
}

type ConnectRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_900b8d357a079f0a, []int{1}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("heimonsy.fxxk.Command_Type", Command_Type_name, Command_Type_value)
	proto.RegisterType((*Command)(nil), "heimonsy.fxxk.Command")
	proto.RegisterType((*ConnectRequest)(nil), "heimonsy.fxxk.ConnectRequest")
}

func init() { proto.RegisterFile("fxxk.proto", fileDescriptor_900b8d357a079f0a) }

var fileDescriptor_900b8d357a079f0a = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xab, 0xa8, 0xc8,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcd, 0x48, 0xcd, 0xcc, 0xcd, 0xcf, 0x2b, 0xae,
	0xd4, 0x03, 0x09, 0x2a, 0x65, 0x73, 0xb1, 0x3b, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x08, 0xe9,
	0x73, 0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x49, 0xeb, 0xa1,
	0x28, 0xd4, 0x83, 0xaa, 0xd2, 0x0b, 0xa9, 0x2c, 0x48, 0x0d, 0x02, 0x2b, 0x54, 0xd2, 0xe7, 0x62,
	0x01, 0xf1, 0x84, 0x38, 0xb8, 0x58, 0x02, 0x3c, 0xfd, 0xdc, 0x05, 0x18, 0x84, 0x84, 0xb8, 0xf8,
	0xfc, 0x5c, 0xc3, 0xe3, 0x9d, 0xfd, 0xfd, 0xfc, 0x5c, 0x9d, 0x43, 0x3c, 0xfd, 0xfd, 0x04, 0x18,
	0x85, 0x38, 0xb9, 0x58, 0x9d, 0x7d, 0xfc, 0x83, 0x5d, 0x05, 0x92, 0x95, 0x04, 0xb8, 0xf8, 0x9c,
	0xf3, 0xf3, 0xf2, 0x52, 0x93, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x8c, 0xbc, 0xb8,
	0x58, 0xdc, 0x2a, 0x2a, 0xb2, 0x85, 0x9c, 0x40, 0xce, 0x00, 0xcb, 0x08, 0xc9, 0x62, 0x58, 0x8c,
	0xac, 0x43, 0x4a, 0x0c, 0xbb, 0xbb, 0x0c, 0x18, 0x9d, 0x94, 0x02, 0x18, 0xa3, 0x24, 0xd2, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x61, 0xea, 0xf4, 0x41, 0xea, 0x16, 0x31,
	0x31, 0x07, 0x05, 0x38, 0x27, 0xb1, 0x81, 0x03, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4a,
	0x5b, 0xba, 0xc7, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FxxkClient is the client API for Fxxk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FxxkClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Fxxk_ConnectClient, error)
}

type fxxkClient struct {
	cc *grpc.ClientConn
}

func NewFxxkClient(cc *grpc.ClientConn) FxxkClient {
	return &fxxkClient{cc}
}

func (c *fxxkClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Fxxk_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fxxk_serviceDesc.Streams[0], "/heimonsy.fxxk.Fxxk/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &fxxkConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fxxk_ConnectClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type fxxkConnectClient struct {
	grpc.ClientStream
}

func (x *fxxkConnectClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FxxkServer is the server API for Fxxk service.
type FxxkServer interface {
	Connect(*ConnectRequest, Fxxk_ConnectServer) error
}

// UnimplementedFxxkServer can be embedded to have forward compatible implementations.
type UnimplementedFxxkServer struct {
}

func (*UnimplementedFxxkServer) Connect(req *ConnectRequest, srv Fxxk_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterFxxkServer(s *grpc.Server, srv FxxkServer) {
	s.RegisterService(&_Fxxk_serviceDesc, srv)
}

func _Fxxk_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FxxkServer).Connect(m, &fxxkConnectServer{stream})
}

type Fxxk_ConnectServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type fxxkConnectServer struct {
	grpc.ServerStream
}

func (x *fxxkConnectServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

var _Fxxk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimonsy.fxxk.Fxxk",
	HandlerType: (*FxxkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Fxxk_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fxxk.proto",
}
